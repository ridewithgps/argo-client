=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module ArgoWorkflows
  class IoArgoprojEventsV1alpha1PulsarEventSource
    attr_accessor :auth_athenz_params

    attr_accessor :auth_athenz_secret

    attr_accessor :auth_token_secret

    attr_accessor :connection_backoff

    attr_accessor :filter

    attr_accessor :json_body

    attr_accessor :metadata

    attr_accessor :tls

    attr_accessor :tls_allow_insecure_connection

    attr_accessor :tls_trust_certs_secret

    attr_accessor :tls_validate_hostname

    attr_accessor :topics

    attr_accessor :type

    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auth_athenz_params' => :'authAthenzParams',
        :'auth_athenz_secret' => :'authAthenzSecret',
        :'auth_token_secret' => :'authTokenSecret',
        :'connection_backoff' => :'connectionBackoff',
        :'filter' => :'filter',
        :'json_body' => :'jsonBody',
        :'metadata' => :'metadata',
        :'tls' => :'tls',
        :'tls_allow_insecure_connection' => :'tlsAllowInsecureConnection',
        :'tls_trust_certs_secret' => :'tlsTrustCertsSecret',
        :'tls_validate_hostname' => :'tlsValidateHostname',
        :'topics' => :'topics',
        :'type' => :'type',
        :'url' => :'url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'auth_athenz_params' => :'Hash<String, String>',
        :'auth_athenz_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'auth_token_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'connection_backoff' => :'IoArgoprojEventsV1alpha1Backoff',
        :'filter' => :'IoArgoprojEventsV1alpha1EventSourceFilter',
        :'json_body' => :'BOOLEAN',
        :'metadata' => :'Hash<String, String>',
        :'tls' => :'IoArgoprojEventsV1alpha1TLSConfig',
        :'tls_allow_insecure_connection' => :'BOOLEAN',
        :'tls_trust_certs_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'tls_validate_hostname' => :'BOOLEAN',
        :'topics' => :'Array<String>',
        :'type' => :'String',
        :'url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'authAthenzParams')
        if (value = attributes[:'authAthenzParams']).is_a?(Hash)
          self.auth_athenz_params = value
        end
      end

      if attributes.has_key?(:'authAthenzSecret')
        self.auth_athenz_secret = attributes[:'authAthenzSecret']
      end

      if attributes.has_key?(:'authTokenSecret')
        self.auth_token_secret = attributes[:'authTokenSecret']
      end

      if attributes.has_key?(:'connectionBackoff')
        self.connection_backoff = attributes[:'connectionBackoff']
      end

      if attributes.has_key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.has_key?(:'jsonBody')
        self.json_body = attributes[:'jsonBody']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'tls')
        self.tls = attributes[:'tls']
      end

      if attributes.has_key?(:'tlsAllowInsecureConnection')
        self.tls_allow_insecure_connection = attributes[:'tlsAllowInsecureConnection']
      end

      if attributes.has_key?(:'tlsTrustCertsSecret')
        self.tls_trust_certs_secret = attributes[:'tlsTrustCertsSecret']
      end

      if attributes.has_key?(:'tlsValidateHostname')
        self.tls_validate_hostname = attributes[:'tlsValidateHostname']
      end

      if attributes.has_key?(:'topics')
        if (value = attributes[:'topics']).is_a?(Array)
          self.topics = value
        end
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auth_athenz_params == o.auth_athenz_params &&
          auth_athenz_secret == o.auth_athenz_secret &&
          auth_token_secret == o.auth_token_secret &&
          connection_backoff == o.connection_backoff &&
          filter == o.filter &&
          json_body == o.json_body &&
          metadata == o.metadata &&
          tls == o.tls &&
          tls_allow_insecure_connection == o.tls_allow_insecure_connection &&
          tls_trust_certs_secret == o.tls_trust_certs_secret &&
          tls_validate_hostname == o.tls_validate_hostname &&
          topics == o.topics &&
          type == o.type &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [auth_athenz_params, auth_athenz_secret, auth_token_secret, connection_backoff, filter, json_body, metadata, tls, tls_allow_insecure_connection, tls_trust_certs_secret, tls_validate_hostname, topics, type, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoWorkflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
