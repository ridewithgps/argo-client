=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module ArgoWorkflows
  # S3Artifact is the location of an S3 artifact
  class IoArgoprojWorkflowV1alpha1S3Artifact
    # AccessKeySecret is the secret selector to the bucket's access key
    attr_accessor :access_key_secret

    # Bucket is the name of the bucket
    attr_accessor :bucket

    # CASecret specifies the secret that contains the CA, used to verify the TLS connection
    attr_accessor :ca_secret

    # CreateBucketIfNotPresent tells the driver to attempt to create the S3 bucket for output artifacts, if it doesn't exist. Setting Enabled Encryption will apply either SSE-S3 to the bucket if KmsKeyId is not set or SSE-KMS if it is.
    attr_accessor :create_bucket_if_not_present

    attr_accessor :encryption_options

    # Endpoint is the hostname of the bucket endpoint
    attr_accessor :endpoint

    # Insecure will connect to the service with TLS
    attr_accessor :insecure

    # Key is the key in the bucket where the artifact resides
    attr_accessor :key

    # Region contains the optional bucket region
    attr_accessor :region

    # RoleARN is the Amazon Resource Name (ARN) of the role to assume.
    attr_accessor :role_arn

    # SecretKeySecret is the secret selector to the bucket's secret key
    attr_accessor :secret_key_secret

    # SessionTokenSecret is used for ephemeral credentials like an IAM assume role or S3 access grant
    attr_accessor :session_token_secret

    # UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
    attr_accessor :use_sdk_creds

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_key_secret' => :'accessKeySecret',
        :'bucket' => :'bucket',
        :'ca_secret' => :'caSecret',
        :'create_bucket_if_not_present' => :'createBucketIfNotPresent',
        :'encryption_options' => :'encryptionOptions',
        :'endpoint' => :'endpoint',
        :'insecure' => :'insecure',
        :'key' => :'key',
        :'region' => :'region',
        :'role_arn' => :'roleARN',
        :'secret_key_secret' => :'secretKeySecret',
        :'session_token_secret' => :'sessionTokenSecret',
        :'use_sdk_creds' => :'useSDKCreds'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'access_key_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'bucket' => :'String',
        :'ca_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'create_bucket_if_not_present' => :'IoArgoprojWorkflowV1alpha1CreateS3BucketOptions',
        :'encryption_options' => :'IoArgoprojWorkflowV1alpha1S3EncryptionOptions',
        :'endpoint' => :'String',
        :'insecure' => :'BOOLEAN',
        :'key' => :'String',
        :'region' => :'String',
        :'role_arn' => :'String',
        :'secret_key_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'session_token_secret' => :'IoK8sApiCoreV1SecretKeySelector',
        :'use_sdk_creds' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accessKeySecret')
        self.access_key_secret = attributes[:'accessKeySecret']
      end

      if attributes.has_key?(:'bucket')
        self.bucket = attributes[:'bucket']
      end

      if attributes.has_key?(:'caSecret')
        self.ca_secret = attributes[:'caSecret']
      end

      if attributes.has_key?(:'createBucketIfNotPresent')
        self.create_bucket_if_not_present = attributes[:'createBucketIfNotPresent']
      end

      if attributes.has_key?(:'encryptionOptions')
        self.encryption_options = attributes[:'encryptionOptions']
      end

      if attributes.has_key?(:'endpoint')
        self.endpoint = attributes[:'endpoint']
      end

      if attributes.has_key?(:'insecure')
        self.insecure = attributes[:'insecure']
      end

      if attributes.has_key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'roleARN')
        self.role_arn = attributes[:'roleARN']
      end

      if attributes.has_key?(:'secretKeySecret')
        self.secret_key_secret = attributes[:'secretKeySecret']
      end

      if attributes.has_key?(:'sessionTokenSecret')
        self.session_token_secret = attributes[:'sessionTokenSecret']
      end

      if attributes.has_key?(:'useSDKCreds')
        self.use_sdk_creds = attributes[:'useSDKCreds']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_key_secret == o.access_key_secret &&
          bucket == o.bucket &&
          ca_secret == o.ca_secret &&
          create_bucket_if_not_present == o.create_bucket_if_not_present &&
          encryption_options == o.encryption_options &&
          endpoint == o.endpoint &&
          insecure == o.insecure &&
          key == o.key &&
          region == o.region &&
          role_arn == o.role_arn &&
          secret_key_secret == o.secret_key_secret &&
          session_token_secret == o.session_token_secret &&
          use_sdk_creds == o.use_sdk_creds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [access_key_secret, bucket, ca_secret, create_bucket_if_not_present, encryption_options, endpoint, insecure, key, region, role_arn, secret_key_secret, session_token_secret, use_sdk_creds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoWorkflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
