=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module ArgoWorkflows
  # TriggerTemplate is the template that describes trigger specification.
  class IoArgoprojEventsV1alpha1TriggerTemplate
    attr_accessor :argo_workflow

    attr_accessor :aws_lambda

    attr_accessor :azure_event_hubs

    attr_accessor :azure_service_bus

    attr_accessor :conditions

    attr_accessor :conditions_reset

    attr_accessor :custom

    attr_accessor :email

    attr_accessor :http

    attr_accessor :k8s

    # Kafka refers to the trigger designed to place messages on Kafka topic. +optional.
    attr_accessor :kafka

    attr_accessor :log

    # Name is a unique name of the action to take.
    attr_accessor :name

    # NATS refers to the trigger designed to place message on NATS subject. +optional.
    attr_accessor :nats

    attr_accessor :open_whisk

    attr_accessor :pulsar

    attr_accessor :slack

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'argo_workflow' => :'argoWorkflow',
        :'aws_lambda' => :'awsLambda',
        :'azure_event_hubs' => :'azureEventHubs',
        :'azure_service_bus' => :'azureServiceBus',
        :'conditions' => :'conditions',
        :'conditions_reset' => :'conditionsReset',
        :'custom' => :'custom',
        :'email' => :'email',
        :'http' => :'http',
        :'k8s' => :'k8s',
        :'kafka' => :'kafka',
        :'log' => :'log',
        :'name' => :'name',
        :'nats' => :'nats',
        :'open_whisk' => :'openWhisk',
        :'pulsar' => :'pulsar',
        :'slack' => :'slack'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'argo_workflow' => :'IoArgoprojEventsV1alpha1ArgoWorkflowTrigger',
        :'aws_lambda' => :'IoArgoprojEventsV1alpha1AWSLambdaTrigger',
        :'azure_event_hubs' => :'IoArgoprojEventsV1alpha1AzureEventHubsTrigger',
        :'azure_service_bus' => :'IoArgoprojEventsV1alpha1AzureServiceBusTrigger',
        :'conditions' => :'String',
        :'conditions_reset' => :'Array<IoArgoprojEventsV1alpha1ConditionsResetCriteria>',
        :'custom' => :'IoArgoprojEventsV1alpha1CustomTrigger',
        :'email' => :'IoArgoprojEventsV1alpha1EmailTrigger',
        :'http' => :'IoArgoprojEventsV1alpha1HTTPTrigger',
        :'k8s' => :'IoArgoprojEventsV1alpha1StandardK8STrigger',
        :'kafka' => :'IoArgoprojEventsV1alpha1KafkaTrigger',
        :'log' => :'IoArgoprojEventsV1alpha1LogTrigger',
        :'name' => :'String',
        :'nats' => :'IoArgoprojEventsV1alpha1NATSTrigger',
        :'open_whisk' => :'IoArgoprojEventsV1alpha1OpenWhiskTrigger',
        :'pulsar' => :'IoArgoprojEventsV1alpha1PulsarTrigger',
        :'slack' => :'IoArgoprojEventsV1alpha1SlackTrigger'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'argoWorkflow')
        self.argo_workflow = attributes[:'argoWorkflow']
      end

      if attributes.has_key?(:'awsLambda')
        self.aws_lambda = attributes[:'awsLambda']
      end

      if attributes.has_key?(:'azureEventHubs')
        self.azure_event_hubs = attributes[:'azureEventHubs']
      end

      if attributes.has_key?(:'azureServiceBus')
        self.azure_service_bus = attributes[:'azureServiceBus']
      end

      if attributes.has_key?(:'conditions')
        self.conditions = attributes[:'conditions']
      end

      if attributes.has_key?(:'conditionsReset')
        if (value = attributes[:'conditionsReset']).is_a?(Array)
          self.conditions_reset = value
        end
      end

      if attributes.has_key?(:'custom')
        self.custom = attributes[:'custom']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'http')
        self.http = attributes[:'http']
      end

      if attributes.has_key?(:'k8s')
        self.k8s = attributes[:'k8s']
      end

      if attributes.has_key?(:'kafka')
        self.kafka = attributes[:'kafka']
      end

      if attributes.has_key?(:'log')
        self.log = attributes[:'log']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'nats')
        self.nats = attributes[:'nats']
      end

      if attributes.has_key?(:'openWhisk')
        self.open_whisk = attributes[:'openWhisk']
      end

      if attributes.has_key?(:'pulsar')
        self.pulsar = attributes[:'pulsar']
      end

      if attributes.has_key?(:'slack')
        self.slack = attributes[:'slack']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          argo_workflow == o.argo_workflow &&
          aws_lambda == o.aws_lambda &&
          azure_event_hubs == o.azure_event_hubs &&
          azure_service_bus == o.azure_service_bus &&
          conditions == o.conditions &&
          conditions_reset == o.conditions_reset &&
          custom == o.custom &&
          email == o.email &&
          http == o.http &&
          k8s == o.k8s &&
          kafka == o.kafka &&
          log == o.log &&
          name == o.name &&
          nats == o.nats &&
          open_whisk == o.open_whisk &&
          pulsar == o.pulsar &&
          slack == o.slack
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [argo_workflow, aws_lambda, azure_event_hubs, azure_service_bus, conditions, conditions_reset, custom, email, http, k8s, kafka, log, name, nats, open_whisk, pulsar, slack].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoWorkflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
