=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module ArgoWorkflows
  class IoArgoprojEventsV1alpha1GithubEventSource
    attr_accessor :active

    attr_accessor :api_token

    attr_accessor :content_type

    attr_accessor :delete_hook_on_finish

    attr_accessor :events

    attr_accessor :filter

    attr_accessor :github_app

    attr_accessor :github_base_url

    attr_accessor :github_upload_url

    attr_accessor :id

    attr_accessor :insecure

    attr_accessor :metadata

    # Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
    attr_accessor :organizations

    attr_accessor :owner

    # Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
    attr_accessor :repositories

    attr_accessor :repository

    attr_accessor :webhook

    attr_accessor :webhook_secret

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'api_token' => :'apiToken',
        :'content_type' => :'contentType',
        :'delete_hook_on_finish' => :'deleteHookOnFinish',
        :'events' => :'events',
        :'filter' => :'filter',
        :'github_app' => :'githubApp',
        :'github_base_url' => :'githubBaseURL',
        :'github_upload_url' => :'githubUploadURL',
        :'id' => :'id',
        :'insecure' => :'insecure',
        :'metadata' => :'metadata',
        :'organizations' => :'organizations',
        :'owner' => :'owner',
        :'repositories' => :'repositories',
        :'repository' => :'repository',
        :'webhook' => :'webhook',
        :'webhook_secret' => :'webhookSecret'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active' => :'BOOLEAN',
        :'api_token' => :'IoK8sApiCoreV1SecretKeySelector',
        :'content_type' => :'String',
        :'delete_hook_on_finish' => :'BOOLEAN',
        :'events' => :'Array<String>',
        :'filter' => :'IoArgoprojEventsV1alpha1EventSourceFilter',
        :'github_app' => :'IoArgoprojEventsV1alpha1GithubAppCreds',
        :'github_base_url' => :'String',
        :'github_upload_url' => :'String',
        :'id' => :'String',
        :'insecure' => :'BOOLEAN',
        :'metadata' => :'Hash<String, String>',
        :'organizations' => :'Array<String>',
        :'owner' => :'String',
        :'repositories' => :'Array<IoArgoprojEventsV1alpha1OwnedRepositories>',
        :'repository' => :'String',
        :'webhook' => :'IoArgoprojEventsV1alpha1WebhookContext',
        :'webhook_secret' => :'IoK8sApiCoreV1SecretKeySelector'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'apiToken')
        self.api_token = attributes[:'apiToken']
      end

      if attributes.has_key?(:'contentType')
        self.content_type = attributes[:'contentType']
      end

      if attributes.has_key?(:'deleteHookOnFinish')
        self.delete_hook_on_finish = attributes[:'deleteHookOnFinish']
      end

      if attributes.has_key?(:'events')
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end

      if attributes.has_key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.has_key?(:'githubApp')
        self.github_app = attributes[:'githubApp']
      end

      if attributes.has_key?(:'githubBaseURL')
        self.github_base_url = attributes[:'githubBaseURL']
      end

      if attributes.has_key?(:'githubUploadURL')
        self.github_upload_url = attributes[:'githubUploadURL']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'insecure')
        self.insecure = attributes[:'insecure']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'organizations')
        if (value = attributes[:'organizations']).is_a?(Array)
          self.organizations = value
        end
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'repositories')
        if (value = attributes[:'repositories']).is_a?(Array)
          self.repositories = value
        end
      end

      if attributes.has_key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.has_key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end

      if attributes.has_key?(:'webhookSecret')
        self.webhook_secret = attributes[:'webhookSecret']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          api_token == o.api_token &&
          content_type == o.content_type &&
          delete_hook_on_finish == o.delete_hook_on_finish &&
          events == o.events &&
          filter == o.filter &&
          github_app == o.github_app &&
          github_base_url == o.github_base_url &&
          github_upload_url == o.github_upload_url &&
          id == o.id &&
          insecure == o.insecure &&
          metadata == o.metadata &&
          organizations == o.organizations &&
          owner == o.owner &&
          repositories == o.repositories &&
          repository == o.repository &&
          webhook == o.webhook &&
          webhook_secret == o.webhook_secret
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active, api_token, content_type, delete_hook_on_finish, events, filter, github_app, github_base_url, github_upload_url, id, insecure, metadata, organizations, owner, repositories, repository, webhook, webhook_secret].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoWorkflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
