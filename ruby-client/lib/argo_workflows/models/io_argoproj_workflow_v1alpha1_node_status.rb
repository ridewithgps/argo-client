=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module ArgoWorkflows
  # NodeStatus contains status information about an individual node in the workflow
  class IoArgoprojWorkflowV1alpha1NodeStatus
    # BoundaryID indicates the node ID of the associated template root node in which this node belongs to
    attr_accessor :boundary_id

    # Children is a list of child node IDs
    attr_accessor :children

    # Daemoned tracks whether or not this node was daemoned and need to be terminated
    attr_accessor :daemoned

    # DisplayName is a human readable representation of the node. Unique within a template boundary
    attr_accessor :display_name

    # EstimatedDuration in seconds.
    attr_accessor :estimated_duration

    # Time at which this node completed
    attr_accessor :finished_at

    # HostNodeName name of the Kubernetes node on which the Pod is running, if applicable
    attr_accessor :host_node_name

    # ID is a unique identifier of a node within the worklow It is implemented as a hash of the node name, which makes the ID deterministic
    attr_accessor :id

    # Inputs captures input parameter values and artifact locations supplied to this template invocation
    attr_accessor :inputs

    # MemoizationStatus holds information about cached nodes
    attr_accessor :memoization_status

    # A human readable message indicating details about why the node is in this condition.
    attr_accessor :message

    # Name is unique name in the node tree used to generate the node ID
    attr_accessor :name

    # NodeFlag tracks some history of node. e.g.) hooked, retried, etc.
    attr_accessor :node_flag

    # OutboundNodes tracks the node IDs which are considered \"outbound\" nodes to a template invocation. For every invocation of a template, there are nodes which we considered as \"outbound\". Essentially, these are last nodes in the execution sequence to run, before the template is considered completed. These nodes are then connected as parents to a following step.  In the case of single pod steps (i.e. container, script, resource templates), this list will be nil since the pod itself is already considered the \"outbound\" node. In the case of DAGs, outbound nodes are the \"target\" tasks (tasks with no children). In the case of steps, outbound nodes are all the containers involved in the last step group. NOTE: since templates are composable, the list of outbound nodes are carried upwards when a DAG/steps template invokes another DAG/steps template. In other words, the outbound nodes of a template, will be a superset of the outbound nodes of its last children.
    attr_accessor :outbound_nodes

    # Outputs captures output parameter values and artifact locations produced by this template invocation
    attr_accessor :outputs

    # Phase a simple, high-level summary of where the node is in its lifecycle. Can be used as a state machine. Will be one of these values \"Pending\", \"Running\" before the node is completed, or \"Succeeded\", \"Skipped\", \"Failed\", \"Error\", or \"Omitted\" as a final state.
    attr_accessor :phase

    # PodIP captures the IP of the pod for daemoned steps
    attr_accessor :pod_ip

    # Progress to completion
    attr_accessor :progress

    # ResourcesDuration is indicative, but not accurate, resource duration. This is populated when the nodes completes.
    attr_accessor :resources_duration

    # Time at which this node started
    attr_accessor :started_at

    # SynchronizationStatus is the synchronization status of the node
    attr_accessor :synchronization_status

    # TemplateName is the template name which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)
    attr_accessor :template_name

    # TemplateRef is the reference to the template resource which this node corresponds to. Not applicable to virtual nodes (e.g. Retry, StepGroup)
    attr_accessor :template_ref

    # TemplateScope is the template scope in which the template of this node was retrieved.
    attr_accessor :template_scope

    # Type indicates type of node
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'boundary_id' => :'boundaryID',
        :'children' => :'children',
        :'daemoned' => :'daemoned',
        :'display_name' => :'displayName',
        :'estimated_duration' => :'estimatedDuration',
        :'finished_at' => :'finishedAt',
        :'host_node_name' => :'hostNodeName',
        :'id' => :'id',
        :'inputs' => :'inputs',
        :'memoization_status' => :'memoizationStatus',
        :'message' => :'message',
        :'name' => :'name',
        :'node_flag' => :'nodeFlag',
        :'outbound_nodes' => :'outboundNodes',
        :'outputs' => :'outputs',
        :'phase' => :'phase',
        :'pod_ip' => :'podIP',
        :'progress' => :'progress',
        :'resources_duration' => :'resourcesDuration',
        :'started_at' => :'startedAt',
        :'synchronization_status' => :'synchronizationStatus',
        :'template_name' => :'templateName',
        :'template_ref' => :'templateRef',
        :'template_scope' => :'templateScope',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'boundary_id' => :'String',
        :'children' => :'Array<String>',
        :'daemoned' => :'BOOLEAN',
        :'display_name' => :'String',
        :'estimated_duration' => :'Integer',
        :'finished_at' => :'IoK8sApimachineryPkgApisMetaV1Time',
        :'host_node_name' => :'String',
        :'id' => :'String',
        :'inputs' => :'IoArgoprojWorkflowV1alpha1Inputs',
        :'memoization_status' => :'IoArgoprojWorkflowV1alpha1MemoizationStatus',
        :'message' => :'String',
        :'name' => :'String',
        :'node_flag' => :'IoArgoprojWorkflowV1alpha1NodeFlag',
        :'outbound_nodes' => :'Array<String>',
        :'outputs' => :'IoArgoprojWorkflowV1alpha1Outputs',
        :'phase' => :'String',
        :'pod_ip' => :'String',
        :'progress' => :'String',
        :'resources_duration' => :'Hash<String, Integer>',
        :'started_at' => :'IoK8sApimachineryPkgApisMetaV1Time',
        :'synchronization_status' => :'IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus',
        :'template_name' => :'String',
        :'template_ref' => :'IoArgoprojWorkflowV1alpha1TemplateRef',
        :'template_scope' => :'String',
        :'type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'boundaryID')
        self.boundary_id = attributes[:'boundaryID']
      end

      if attributes.has_key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.has_key?(:'daemoned')
        self.daemoned = attributes[:'daemoned']
      end

      if attributes.has_key?(:'displayName')
        self.display_name = attributes[:'displayName']
      end

      if attributes.has_key?(:'estimatedDuration')
        self.estimated_duration = attributes[:'estimatedDuration']
      end

      if attributes.has_key?(:'finishedAt')
        self.finished_at = attributes[:'finishedAt']
      end

      if attributes.has_key?(:'hostNodeName')
        self.host_node_name = attributes[:'hostNodeName']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'inputs')
        self.inputs = attributes[:'inputs']
      end

      if attributes.has_key?(:'memoizationStatus')
        self.memoization_status = attributes[:'memoizationStatus']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'nodeFlag')
        self.node_flag = attributes[:'nodeFlag']
      end

      if attributes.has_key?(:'outboundNodes')
        if (value = attributes[:'outboundNodes']).is_a?(Array)
          self.outbound_nodes = value
        end
      end

      if attributes.has_key?(:'outputs')
        self.outputs = attributes[:'outputs']
      end

      if attributes.has_key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.has_key?(:'podIP')
        self.pod_ip = attributes[:'podIP']
      end

      if attributes.has_key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.has_key?(:'resourcesDuration')
        if (value = attributes[:'resourcesDuration']).is_a?(Hash)
          self.resources_duration = value
        end
      end

      if attributes.has_key?(:'startedAt')
        self.started_at = attributes[:'startedAt']
      end

      if attributes.has_key?(:'synchronizationStatus')
        self.synchronization_status = attributes[:'synchronizationStatus']
      end

      if attributes.has_key?(:'templateName')
        self.template_name = attributes[:'templateName']
      end

      if attributes.has_key?(:'templateRef')
        self.template_ref = attributes[:'templateRef']
      end

      if attributes.has_key?(:'templateScope')
        self.template_scope = attributes[:'templateScope']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          boundary_id == o.boundary_id &&
          children == o.children &&
          daemoned == o.daemoned &&
          display_name == o.display_name &&
          estimated_duration == o.estimated_duration &&
          finished_at == o.finished_at &&
          host_node_name == o.host_node_name &&
          id == o.id &&
          inputs == o.inputs &&
          memoization_status == o.memoization_status &&
          message == o.message &&
          name == o.name &&
          node_flag == o.node_flag &&
          outbound_nodes == o.outbound_nodes &&
          outputs == o.outputs &&
          phase == o.phase &&
          pod_ip == o.pod_ip &&
          progress == o.progress &&
          resources_duration == o.resources_duration &&
          started_at == o.started_at &&
          synchronization_status == o.synchronization_status &&
          template_name == o.template_name &&
          template_ref == o.template_ref &&
          template_scope == o.template_scope &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [boundary_id, children, daemoned, display_name, estimated_duration, finished_at, host_node_name, id, inputs, memoization_status, message, name, node_flag, outbound_nodes, outputs, phase, pod_ip, progress, resources_duration, started_at, synchronization_status, template_name, template_ref, template_scope, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoWorkflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
