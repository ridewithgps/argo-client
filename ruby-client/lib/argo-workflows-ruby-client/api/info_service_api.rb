=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'uri'

module argo-workflows
  class InfoServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [IoArgoprojWorkflowV1alpha1CollectEventResponse]
    def info_service_collect_event(body, opts = {})
      data, _status_code, _headers = info_service_collect_event_with_http_info(body, opts)
      data
    end

    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IoArgoprojWorkflowV1alpha1CollectEventResponse, Fixnum, Hash)>] IoArgoprojWorkflowV1alpha1CollectEventResponse data, response status code and response headers
    def info_service_collect_event_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoServiceApi.info_service_collect_event ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InfoServiceApi.info_service_collect_event"
      end
      # resource path
      local_var_path = '/api/v1/tracking/event'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IoArgoprojWorkflowV1alpha1CollectEventResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoServiceApi#info_service_collect_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [IoArgoprojWorkflowV1alpha1InfoResponse]
    def info_service_get_info(opts = {})
      data, _status_code, _headers = info_service_get_info_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(IoArgoprojWorkflowV1alpha1InfoResponse, Fixnum, Hash)>] IoArgoprojWorkflowV1alpha1InfoResponse data, response status code and response headers
    def info_service_get_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoServiceApi.info_service_get_info ...'
      end
      # resource path
      local_var_path = '/api/v1/info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IoArgoprojWorkflowV1alpha1InfoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoServiceApi#info_service_get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [IoArgoprojWorkflowV1alpha1GetUserInfoResponse]
    def info_service_get_user_info(opts = {})
      data, _status_code, _headers = info_service_get_user_info_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(IoArgoprojWorkflowV1alpha1GetUserInfoResponse, Fixnum, Hash)>] IoArgoprojWorkflowV1alpha1GetUserInfoResponse data, response status code and response headers
    def info_service_get_user_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoServiceApi.info_service_get_user_info ...'
      end
      # resource path
      local_var_path = '/api/v1/userinfo'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IoArgoprojWorkflowV1alpha1GetUserInfoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoServiceApi#info_service_get_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [IoArgoprojWorkflowV1alpha1Version]
    def info_service_get_version(opts = {})
      data, _status_code, _headers = info_service_get_version_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(IoArgoprojWorkflowV1alpha1Version, Fixnum, Hash)>] IoArgoprojWorkflowV1alpha1Version data, response status code and response headers
    def info_service_get_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InfoServiceApi.info_service_get_version ...'
      end
      # resource path
      local_var_path = '/api/v1/version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IoArgoprojWorkflowV1alpha1Version')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InfoServiceApi#info_service_get_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
