=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'uri'

module argo-workflows
  class ArtifactServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get an artifact.
    # @param namespace 
    # @param id_discriminator 
    # @param id 
    # @param node_id 
    # @param artifact_name 
    # @param artifact_discriminator 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def artifact_service_get_artifact_file(namespace, id_discriminator, id, node_id, artifact_name, artifact_discriminator, opts = {})
      data, _status_code, _headers = artifact_service_get_artifact_file_with_http_info(namespace, id_discriminator, id, node_id, artifact_name, artifact_discriminator, opts)
      data
    end

    # Get an artifact.
    # @param namespace 
    # @param id_discriminator 
    # @param id 
    # @param node_id 
    # @param artifact_name 
    # @param artifact_discriminator 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def artifact_service_get_artifact_file_with_http_info(namespace, id_discriminator, id, node_id, artifact_name, artifact_discriminator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.artifact_service_get_artifact_file ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify the required parameter 'id_discriminator' is set
      if @api_client.config.client_side_validation && id_discriminator.nil?
        fail ArgumentError, "Missing the required parameter 'id_discriminator' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['workflow', 'archived-workflows'].include?(id_discriminator)
        fail ArgumentError, "invalid value for 'id_discriminator', must be one of workflow, archived-workflows"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify the required parameter 'artifact_discriminator' is set
      if @api_client.config.client_side_validation && artifact_discriminator.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_discriminator' when calling ArtifactServiceApi.artifact_service_get_artifact_file"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['outputs'].include?(artifact_discriminator)
        fail ArgumentError, "invalid value for 'artifact_discriminator', must be one of outputs"
      end
      # resource path
      local_var_path = '/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}'.sub('{' + 'namespace' + '}', namespace.to_s).sub('{' + 'idDiscriminator' + '}', id_discriminator.to_s).sub('{' + 'id' + '}', id.to_s).sub('{' + 'nodeId' + '}', node_id.to_s).sub('{' + 'artifactName' + '}', artifact_name.to_s).sub('{' + 'artifactDiscriminator' + '}', artifact_discriminator.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#artifact_service_get_artifact_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an input artifact.
    # @param namespace 
    # @param name 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def artifact_service_get_input_artifact(namespace, name, node_id, artifact_name, opts = {})
      data, _status_code, _headers = artifact_service_get_input_artifact_with_http_info(namespace, name, node_id, artifact_name, opts)
      data
    end

    # Get an input artifact.
    # @param namespace 
    # @param name 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def artifact_service_get_input_artifact_with_http_info(namespace, name, node_id, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.artifact_service_get_input_artifact ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.artifact_service_get_input_artifact"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ArtifactServiceApi.artifact_service_get_input_artifact"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ArtifactServiceApi.artifact_service_get_input_artifact"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.artifact_service_get_input_artifact"
      end
      # resource path
      local_var_path = '/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}'.sub('{' + 'namespace' + '}', namespace.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'nodeId' + '}', node_id.to_s).sub('{' + 'artifactName' + '}', artifact_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#artifact_service_get_input_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an input artifact by UID.
    # @param uid 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def artifact_service_get_input_artifact_by_uid(uid, node_id, artifact_name, opts = {})
      data, _status_code, _headers = artifact_service_get_input_artifact_by_uid_with_http_info(uid, node_id, artifact_name, opts)
      data
    end

    # Get an input artifact by UID.
    # @param uid 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def artifact_service_get_input_artifact_by_uid_with_http_info(uid, node_id, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.artifact_service_get_input_artifact_by_uid ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ArtifactServiceApi.artifact_service_get_input_artifact_by_uid"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ArtifactServiceApi.artifact_service_get_input_artifact_by_uid"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.artifact_service_get_input_artifact_by_uid"
      end
      # resource path
      local_var_path = '/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}'.sub('{' + 'uid' + '}', uid.to_s).sub('{' + 'nodeId' + '}', node_id.to_s).sub('{' + 'artifactName' + '}', artifact_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#artifact_service_get_input_artifact_by_uid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an output artifact.
    # @param namespace 
    # @param name 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def artifact_service_get_output_artifact(namespace, name, node_id, artifact_name, opts = {})
      data, _status_code, _headers = artifact_service_get_output_artifact_with_http_info(namespace, name, node_id, artifact_name, opts)
      data
    end

    # Get an output artifact.
    # @param namespace 
    # @param name 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def artifact_service_get_output_artifact_with_http_info(namespace, name, node_id, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.artifact_service_get_output_artifact ...'
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling ArtifactServiceApi.artifact_service_get_output_artifact"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ArtifactServiceApi.artifact_service_get_output_artifact"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ArtifactServiceApi.artifact_service_get_output_artifact"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.artifact_service_get_output_artifact"
      end
      # resource path
      local_var_path = '/artifacts/{namespace}/{name}/{nodeId}/{artifactName}'.sub('{' + 'namespace' + '}', namespace.to_s).sub('{' + 'name' + '}', name.to_s).sub('{' + 'nodeId' + '}', node_id.to_s).sub('{' + 'artifactName' + '}', artifact_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#artifact_service_get_output_artifact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an output artifact by UID.
    # @param uid 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def artifact_service_get_output_artifact_by_uid(uid, node_id, artifact_name, opts = {})
      data, _status_code, _headers = artifact_service_get_output_artifact_by_uid_with_http_info(uid, node_id, artifact_name, opts)
      data
    end

    # Get an output artifact by UID.
    # @param uid 
    # @param node_id 
    # @param artifact_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def artifact_service_get_output_artifact_by_uid_with_http_info(uid, node_id, artifact_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ArtifactServiceApi.artifact_service_get_output_artifact_by_uid ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling ArtifactServiceApi.artifact_service_get_output_artifact_by_uid"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling ArtifactServiceApi.artifact_service_get_output_artifact_by_uid"
      end
      # verify the required parameter 'artifact_name' is set
      if @api_client.config.client_side_validation && artifact_name.nil?
        fail ArgumentError, "Missing the required parameter 'artifact_name' when calling ArtifactServiceApi.artifact_service_get_output_artifact_by_uid"
      end
      # resource path
      local_var_path = '/artifacts-by-uid/{uid}/{nodeId}/{artifactName}'.sub('{' + 'uid' + '}', uid.to_s).sub('{' + 'nodeId' + '}', node_id.to_s).sub('{' + 'artifactName' + '}', artifact_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ArtifactServiceApi#artifact_service_get_output_artifact_by_uid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
