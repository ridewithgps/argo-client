=begin
#Argo Workflows API

#Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

OpenAPI spec version: VERSION

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module argo-workflows
  class IoArgoprojEventsV1alpha1SensorSpec
    # Dependencies is a list of the events that this sensor is dependent on.
    attr_accessor :dependencies

    # ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.
    attr_accessor :error_on_failed_round

    attr_accessor :event_bus_name

    attr_accessor :logging_fields

    attr_accessor :replicas

    attr_accessor :revision_history_limit

    attr_accessor :template

    # Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
    attr_accessor :triggers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dependencies' => :'dependencies',
        :'error_on_failed_round' => :'errorOnFailedRound',
        :'event_bus_name' => :'eventBusName',
        :'logging_fields' => :'loggingFields',
        :'replicas' => :'replicas',
        :'revision_history_limit' => :'revisionHistoryLimit',
        :'template' => :'template',
        :'triggers' => :'triggers'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'dependencies' => :'Array<IoArgoprojEventsV1alpha1EventDependency>',
        :'error_on_failed_round' => :'BOOLEAN',
        :'event_bus_name' => :'String',
        :'logging_fields' => :'Hash<String, String>',
        :'replicas' => :'Integer',
        :'revision_history_limit' => :'Integer',
        :'template' => :'IoArgoprojEventsV1alpha1Template',
        :'triggers' => :'Array<IoArgoprojEventsV1alpha1Trigger>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'dependencies')
        if (value = attributes[:'dependencies']).is_a?(Array)
          self.dependencies = value
        end
      end

      if attributes.has_key?(:'errorOnFailedRound')
        self.error_on_failed_round = attributes[:'errorOnFailedRound']
      end

      if attributes.has_key?(:'eventBusName')
        self.event_bus_name = attributes[:'eventBusName']
      end

      if attributes.has_key?(:'loggingFields')
        if (value = attributes[:'loggingFields']).is_a?(Hash)
          self.logging_fields = value
        end
      end

      if attributes.has_key?(:'replicas')
        self.replicas = attributes[:'replicas']
      end

      if attributes.has_key?(:'revisionHistoryLimit')
        self.revision_history_limit = attributes[:'revisionHistoryLimit']
      end

      if attributes.has_key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.has_key?(:'triggers')
        if (value = attributes[:'triggers']).is_a?(Array)
          self.triggers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dependencies == o.dependencies &&
          error_on_failed_round == o.error_on_failed_round &&
          event_bus_name == o.event_bus_name &&
          logging_fields == o.logging_fields &&
          replicas == o.replicas &&
          revision_history_limit == o.revision_history_limit &&
          template == o.template &&
          triggers == o.triggers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [dependencies, error_on_failed_round, event_bus_name, logging_fields, replicas, revision_history_limit, template, triggers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = argo-workflows.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
